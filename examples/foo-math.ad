== Writing Swift Playgrounds Using Asciidoctor

This is a short demo of how to use *ad2play*
to create Swift playgrounds.  For installation
notes, see the README file.  That 
file also tells you how to run *ad2play*
to compile a playground from your
source file.

The file you are looking at now, *foo-math.ad*, 
is the _source document_ for the
playground *foo-math.playground*.
Create *foo-math.playground* by running the command
*./ad2play foo.ad*. 

You should files *foo-math.ad*
and *foo-math.playground*, using a text editor for
*foo.ad* and XCode for *foo-math.playground*.
By doing so, you will figure out
most of what you need to know to make
playgrounds using asciidoc markup. You
will also see how mathematical formulas
are written. (We use TeX)

To create an html version of *foo-math.ad*
run the command *./ad2html foo-math.ad*
included in this package.  This command
runs *asciidoctor* and then does some
postprocessing to handle mathematical
formulas.  This is a temporary
kludge -- it should be done with asciidoctor,
but I am rusty on many things after
a long summer vaction:-)

In the non-Swift parts of 
this document you can use mark
up to structure and beautify the playground
you create.  See 
http://asciidoctor.org[asciidoctor.org]
for documentation on asciidoc markup.


The sections containing Swift code
are written like this:


[source, swift]
--
var a = 1.2
var b = 2.3
a*b
--

In the playground you can modify and add to 
the Swift code.

== A more interesting example

:asciimath:

Let

\[
H(n) = 1 + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} +  \cdots + \frac{1}{n}
\]
To compute this quantity, we proceed as follows:

[source, swift]
--
var sum = 0.0
let n = 20
for k in 1...n {
  sum += 1.0/Double(k)
}
sum
--

Much better than doing the computation by hand, no?

*Question:* What happens to \(H(n)\) as \(n\) gets
larger and larger?




