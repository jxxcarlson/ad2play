:imagesdir: images
:no-header-footer:


== Drawing 101

image::green.png[float=left, width=170]

The aim of this little drawing exercise is to 
to create and display a simple image composed of rectangles
and lines -- like the one you see on the left.

This version of the exercise is a Swift
playground that was created from a markup
file (asciidoc).  I learned a lot from
the excellent 
http://www.youtube.com/watch?v=F9T551Y0mYo[Youtube video]
from http://www.fullstack.io[fullstack.io].

The tool I am using to convert asciidoc files to 
playgrounds is a ruby script that
calls http://asciidoctor.org[Asciidoctor] to 
convert the markup into the bundle of files
that make up a Swift playground.

The advantage of writing in asciidoc is that 
the same file can be used to publish in
different "media".  The file used
for this exercise is *drawing101.ad*. Run
the command *asciidoctor drawing101.ad*
to produce *drawing101.html*.  Run
the command  *ad2play drawing101.ad*
to produce the Swift playground bundle
*drawing101.playground*.  

See http://asciidoctor.org[asciidoctor.org]
for information on how to use and install
asciidoctor. I would like to credit jas
whose http://github.com/jas/swift-playground-builder[playground-builder]
inspired me to write *ad2play*.  

Current version of *ad2play*: 0.1 (hacked together).


=== Set up view and image

[source, swift]
--
import Cocoa; import XCPlayground // Set Xcode to MacOS, not IOS

let graphWidth: CGFloat = 300.0; let graphHeight: CGFloat = 300.0

var frameRect = NSRect(x: 0, y: 0, width: graphWidth, height: graphHeight)
var view = NSImageView(frame: frameRect)

var size = NSMakeSize( graphWidth, graphHeight )
var image = NSImage(size: size)

image.lockFocus()
--

=== Fill the image with the background color

[source, swift]
--
let backgroundColor = NSColor.greenColor()
backgroundColor.setFill()
NSRectFill(NSMakeRect(0, 0, graphWidth, graphHeight))
--


=== Draw two squares in two opposite corners of the image

[source, swift]
--
let foregroundColor = NSColor.blackColor()
foregroundColor.setFill()

let dim: CGFloat = 40.0

NSRectFill(NSMakeRect(0, 0, dim, dim))
NSRectFill(NSMakeRect(graphWidth - dim , graphHeight - dim, dim, dim))

image.unlockFocus()
--

=== Draw a diagonal line from one corner to another

[source, swift]
--
image.lockFocus()

var path = NSBezierPath()

path.moveToPoint(NSPoint(x: 0, y: 0))

path.lineToPoint(NSPoint(x: graphWidth, y: graphHeight))

path.stroke()

image.unlockFocus()
--


=== Draw one branch of a hyperbola in the upper left

[source, swift]
--
var shift: CGFloat = 0.0
let increment: CGFloat = 14.0

while shift <= 300 {
    
    image.lockFocus()
    var path = NSBezierPath()
    path.moveToPoint(NSPoint(x: shift, y: graphHeight))
    path.lineToPoint(NSPoint(x: 0, y: shift))
    path.stroke()
    shift = shift + 14
    image.unlockFocus()
   
}
--

=== Draw one branch of another hyperbola in the lower right

[source, swift]
--
shift = 0

while shift <= 300 {
    
    image.lockFocus()
    var path = NSBezierPath()
    path.moveToPoint(NSPoint(x: shift, y: 0))
    path.lineToPoint(NSPoint(x: graphWidth, y: shift))
    path.stroke()
    shift = shift + 14
    image.unlockFocus()
    
}
--

=== Display the final result

[source, swift]
--
var view2 = NSImageView(frame: frameRect)
view2.image = image
XCPShowView("Hyerbola", view2)
--
