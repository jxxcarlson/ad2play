== Writing Swift Playgrounds Using Asciidoctor

This is a short demo of how to use *ad2play*
to create Swift playgrounds.  For installation
notes, see the README file.  Requirements: 
Ruby and the *asciidoctor* gem.


The file you are looking at now, *foo.ad*, 
is the _source document_ for the
playground *foo.playground*.  Create
*foo.playground* by running the command
*./ad2play foo.ad*. 


You should files *foo.ad*
and *foo.playground*, using a text editor for
*foo.ad* and XCode for *foo.playground*.
By doing so, you will figure out
most of what you need to know to make
playgrounds using asciidoc markup.

To create an html version of _foo.ad_
run the command *asciidoctor foo.ad*.

In the non-Swift parts of 
this document you can use mark
up to structure and beautify the playground
you create.  See 
http://asciidoctor.org[asciidoctor.org]
for documentation on asciidoc markup.


The sections containing Swift code
are written like this:


[source, swift]
--
var a = 1.2
var b = 2.3
a*b
--

In the playground you can modify and add to 
the Swift code.

== A more interesting example

We compute the quantity 1 + 1/2 + 1/3 + ... + 1/n
for a given value of n:

[source, swift]
--
var sum = 0.0
let n = 20
for k in 1...n {
  sum += 1.0/Double(k)
}
sum
--

Much better than doing the computation by hand, no?

*Question:* What happens to the sum as _n_ 
gets larger and larger?

== Mathematical notation

Both Asciidoctor and ad2playground support mathemtical notation.
See the files *foo-math.ad*, *foo-math.html*, and *foo-math.playground*
for examples and further details.


